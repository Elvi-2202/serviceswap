security:
    # Paramètres de hachage des mots de passe. 'auto' est une bonne valeur par défaut.
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto
            cost: 12 # Un coût plus élevé est généralement meilleur pour la sécurité

    # Providers : définit où Symfony trouve les informations utilisateur
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User # Chemin vers votre classe d'entité User
                property: email        # Propriété utilisée pour l'identification (email ou pseudo)

    # Firewalls : gèrent comment les requêtes sont authentifiées
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false # Pas de sécurité pour les outils de développement

        api:
            pattern: ^/api # Ce pare-feu s'applique à toutes les routes commençant par /api
            stateless: true # Indique que l'application ne maintient pas de sessions entre les requêtes

            # json_login : Configure le point d'accès pour l'authentification (pour obtenir un JWT)
            json_login:
                check_path: /api/login_check # L'URL où l'utilisateur envoie ses identifiants (email/password)
                username_path: email         # Indique à Symfony de chercher 'email' au lieu de 'username'
                password_path: password      # La clé pour le mot de passe dans la requête JSON
                success_handler: lexik_jwt_authentication.handler.authentication_success # Gère le succès de l'authentification
                failure_handler: lexik_jwt_authentication.handler.authentication_failure # Gère l'échec de l'authentification

            # jwt : Active l'authentification JWT pour ce firewall
            jwt: ~
            provider: app_user_provider # Le provider à utiliser pour récupérer l'utilisateur

    # access_control : Gère les permissions d'accès aux routes
    # L'ORDRE EST EXTRÊMEMENT IMPORTANT ! Les règles sont lues du haut vers le bas.
    access_control:
        # 1. Autoriser l'accès à l'endpoint de connexion (login_check)
        - { path: ^/api/login_check$, methods: [OPTIONS, POST], roles: PUBLIC_ACCESS }
        
        # 2. Autoriser l'accès public aux routes de création et d'affichage (lecture)
        - { path: ^/api/signup, roles: PUBLIC_ACCESS }
        - { path: ^/api/categories$, methods: [GET], roles: PUBLIC_ACCESS }
        - { path: ^/api/user/user_create$, methods: [POST], roles: PUBLIC_ACCESS }
        - { path: ^/api/services, roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/services$, methods: [GET], roles: PUBLIC_ACCESS }

        # 3. Toutes les AUTRES routes sous /api nécessitent une authentification complète
        # Cette règle de "catch-all" DOIT rester la dernière.
        - { path: ^/api, roles: IS_AUTHENTICATED_FULLY }

    # Configuration spécifique pour l'environnement de test (facultatif)
when@test:
    security:
        password_hashers:
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4
                time_cost: 3
                memory_cost: 10